-- Create table for storing Google Ads campaigns generated by AI
CREATE TABLE google_ads_campaigns (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  website_id UUID REFERENCES user_websites(id) ON DELETE CASCADE NOT NULL,
  
  -- Page and analysis data
  page_url TEXT NOT NULL,
  page_title TEXT,
  keywords JSONB NOT NULL, -- Array of ranked keywords for this page
  
  -- Campaign configuration
  campaign_type TEXT NOT NULL CHECK (campaign_type IN ('search', 'pmax', 'ai_recommended')),
  recommended_type TEXT, -- If ai_recommended, this stores the actual recommendation
  
  -- AI Generated content
  personas JSONB NOT NULL, -- Target personas generated by AI
  campaign_name TEXT NOT NULL,
  headlines JSONB NOT NULL, -- Array of headlines (up to 15 for RSA)
  descriptions JSONB NOT NULL, -- Array of descriptions (up to 4 for RSA)
  
  -- Campaign settings
  budget_recommendation DECIMAL(10,2),
  target_locations JSONB, -- Array of target countries/locations
  target_languages JSONB, -- Array of target languages
  bid_strategy TEXT,
  target_cpa DECIMAL(10,2),
  target_roas DECIMAL(5,2),
  
  -- OpenAI response metadata
  openai_model TEXT NOT NULL DEFAULT 'gpt-4',
  openai_tokens_used INTEGER,
  openai_cost DECIMAL(10,4),
  raw_ai_response JSONB, -- Store full AI response for debugging
  
  -- Status and timestamps
  status TEXT NOT NULL DEFAULT 'generated' CHECK (status IN ('generated', 'exported', 'imported')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  exported_at TIMESTAMP WITH TIME ZONE,
  
  -- Constraints
  CONSTRAINT valid_headlines_count CHECK (jsonb_array_length(headlines) >= 3 AND jsonb_array_length(headlines) <= 15),
  CONSTRAINT valid_descriptions_count CHECK (jsonb_array_length(descriptions) >= 2 AND jsonb_array_length(descriptions) <= 4)
);

-- Create indexes for performance
CREATE INDEX idx_google_ads_campaigns_user_id ON google_ads_campaigns(user_id);
CREATE INDEX idx_google_ads_campaigns_website_id ON google_ads_campaigns(website_id);
CREATE INDEX idx_google_ads_campaigns_page_url ON google_ads_campaigns(page_url);
CREATE INDEX idx_google_ads_campaigns_status ON google_ads_campaigns(status);
CREATE INDEX idx_google_ads_campaigns_created_at ON google_ads_campaigns(created_at DESC);

-- Enable Row Level Security
ALTER TABLE google_ads_campaigns ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their own campaigns" ON google_ads_campaigns
  FOR SELECT USING (
    auth.uid() = user_id 
    OR EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.role = 'admin'
    )
  );

CREATE POLICY "Users can insert their own campaigns" ON google_ads_campaigns
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own campaigns" ON google_ads_campaigns
  FOR UPDATE USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own campaigns" ON google_ads_campaigns
  FOR DELETE USING (auth.uid() = user_id);

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_google_ads_campaigns_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_google_ads_campaigns_updated_at
  BEFORE UPDATE ON google_ads_campaigns
  FOR EACH ROW
  EXECUTE FUNCTION update_google_ads_campaigns_updated_at();

-- Grant necessary permissions
GRANT ALL ON google_ads_campaigns TO authenticated;
GRANT ALL ON google_ads_campaigns TO service_role;